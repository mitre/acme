#!/usr/bin/env python
# coding: utf-8

# # Extract HT/WT from Synthea CSV
# 
# For a directory of CSV files generated by Synthea, extract a single file of height and weight observations for use in growthcleanr data testing.

# ## Synthea modifications and patient generation
# 
# This requires two changes to Synthea. First, the growth data error generator is currently hard-coded to limit error generation to the age of 20. We are looking at adults, so change `MAX_AGE` in the line below.
# 
# ```bash
# 11:59:12 ❯ git diff src/main/java/org/mitre/synthea/editors/GrowthDataErrorsEditor.java
# 
# src/main/java/org/mitre/synthea/editors/GrowthDataErrorsEditor.java
# ───────────────────────────────────────────────────────────────────────────────────────────────────
# 
# ────────────────────────────────────────────────────────────────────┐
# public class GrowthDataErrorsEditor implements HealthRecordEditor { │
# ────────────────────────────────────────────────────────────────────┘
#  34 ⋮ 34 │
#  35 ⋮ 35 │  public GrowthDataErrorsEditor() { }
#  36 ⋮ 36 │
#  37 ⋮    │  public static int MAX_AGE = 20;
#     ⋮ 37 │  // public static int MAX_AGE = 20;
#     ⋮ 38 │  public static int MAX_AGE = 70;
#  38 ⋮ 39 │  public static double POUNDS_PER_KG = 2.205;
#  39 ⋮ 40 │  public static double INCHES_PER_CM = 0.394;
# ```
# 
# Second, enable the `growtherrors` module, and enable CSV exports:
# 
# ```bash
# 11:59:23 ❯ git diff src/main/resources/synthea.properties
# 
# src/main/resources/synthea.properties
# ───────────────────────────────────────────────────────────────────────────────────────────────────
# 
# ─────────────────────────────────────────┐
# exporter.practitioner.fhir.export = true │
# ─────────────────────────────────────────┘
#  25 ⋮ 25 │exporter.practitioner.fhir_stu3.export = false
#  26 ⋮ 26 │exporter.practitioner.fhir_dstu2.export = false
#  27 ⋮ 27 │exporter.encoding = UTF-8
#  28 ⋮    │exporter.csv.export = false
#     ⋮ 28 │# exporter.csv.export = false
#     ⋮ 29 │exporter.csv.export = true
#  29 ⋮ 30 │# if exporter.csv.append_mode = true, then each run will add new data to any existing CSVs. if false, each run will clear out the files and start fresh
#  30 ⋮ 31 │exporter.csv.append_mode = false
#  31 ⋮ 32 │# if exporter.csv.folder_per_run = true, then each run will have CSVs placed into a unique subfolder. if false, each run will only use the top-level csv folder
# 
# ─────────────────────────────────┐
# physiology.state.enabled = false │
# ─────────────────────────────────┘
# 226 ⋮227 │
# 227 ⋮228 │# set to true to introduce errors in height, weight and BMI observations for people
# 228 ⋮229 │# under 20 years old
# 229 ⋮    │growtherrors = false
#     ⋮230 │# growtherrors = false
#     ⋮231 │growtherrors = true
# ```
# 
# Finally, recompile and run Synthea:
# 
# ```bash
# % ./gradlew build
# ```
# 
# ...wait for it... then:
# 
# ```bash
# % ./run_synthea -s 42 -p 1000 -a 18-70
# ```
# 
# This runs synthea with a random seed of 42 and generates 1000 patients with ages between 18 and 70. Output should look something like this:

# In[1]:


get_ipython().system('ls -lh ~/projects/synthea/output/csv')


# Note that the Synthea CSV export schema is detailed at https://github.com/synthetichealth/synthea/wiki/CSV-File-Data-Dictionary.

# ## Extracting HT/WT for growthcleanr

# The files `patients.csv` and `observations.csv` should have everything we need.

# In[2]:


from datetime import timedelta
import numpy as np
import pandas as pd


# In[3]:


patients = pd.read_csv("~/projects/synthea/output/csv/patients.csv")
patients.head()


# In[4]:


patients.columns


# In[5]:


patients['GENDER'].describe()


# From `patients` we need only [Id, BIRTHDATE, GENDER].

# In[6]:


p = patients[["Id", "BIRTHDATE", "GENDER"]]
p.head()


# In[7]:


observations = pd.read_csv("~/projects/synthea/output/csv/observations.csv")
observations.head()


# Verify that there's only one code for each of Body Height and Body Weight, and that units are consistent.

# In[8]:


observations.loc[observations["DESCRIPTION"] == "Body Weight"].groupby(["CODE", "DESCRIPTION", "UNITS"])["UNITS"].describe()


# In[9]:


observations.loc[observations["DESCRIPTION"] == "Body Height"].groupby(["CODE", "DESCRIPTION", "UNITS"])["UNITS"].describe()


# Looks right! Now slim that down.

# In[10]:


o = observations.loc[observations["DESCRIPTION"].isin(["Body Height", "Body Weight"])].copy()


# In[11]:


o["id"] = np.arange(len(o)) + 1
o = o.assign(param=lambda r: np.where(r["DESCRIPTION"] == "Body Height", "HEIGHTCM", "WEIGHTKG"))
o = o.rename(columns={"PATIENT": "subjid", "VALUE": "measurement"})
o = o[["id", "DATE", "subjid", "param", "measurement"]]
o.head()


# ### Target format
# 
# ```csv
# id   subjid  sex  age_years  param     measurement
# 1    1       1    18         HEIGHTCM  212.491019752261
# 2    1       1    18.8       HEIGHTCM  208.312323310149
# ```

# In[12]:


p.head()


# In[13]:


c = o.merge(p, left_on="subjid", right_on="Id").drop(columns=["Id"])
c.head()


# In[14]:


c = c.assign(age_years=lambda r: (r["DATE"].astype(np.datetime64) - r["BIRTHDATE"].astype(np.datetime64)) / timedelta(days=365.25))
c = c.drop(columns=["DATE", "BIRTHDATE"])
c.head()


# In[15]:


c = c.assign(sex=lambda r: np.where(r["GENDER"] == "M", 0, 1))
c = c.drop(columns=["GENDER"])
c.head()


# In[16]:


c.to_csv("/tmp/synthetic-observations.csv", index=False)

